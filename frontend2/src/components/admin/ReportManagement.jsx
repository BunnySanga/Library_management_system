import { useQuery, useMutation, useQueryClient } from "react-query";
import axios from "axios";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  Button,
  Box,
  Dialog,
  DialogTitle,
  MenuItem,
  DialogContent,
  DialogActions,
  TextField,
} from "@mui/material";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "react-toastify";

function ReportManagement() {
  const queryClient = useQueryClient();
  const { register, handleSubmit, reset } = useForm();
  const [open, setOpen] = useState(false);

  const { data: reports, isLoading } = useQuery("reports", async () => {
    const response = await axios.get("/api/reports", {
      headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
    });
    return response.data.reports;
  });

  const generateReport = useMutation(
    ({ type, data }) =>
      axios.post(`/api/reports/${type}`, data, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
      }),
    {
      onSuccess: () => {
        queryClient.invalidateQueries("reports");
        toast.success("Report generated successfully");
        setOpen(false);
        reset();
      },
      onError: () => toast.error("Failed to generate report"),
    }
  );

  const deleteReport = useMutation(
    (reportId) =>
      axios.delete(`/api/reports/${reportId}`, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
      }),
    {
      onSuccess: () => {
        queryClient.invalidateQueries("reports");
        toast.success("Report deleted successfully");
      },
      onError: () => toast.error("Failed to delete report"),
    }
  );

  const onSubmit = (data) => {
    const reportType = {
      "Book Inventory": "book-inventory",
      "User Activity": "user-activity",
      "Fine Collection": "fine-collection",
      "Book Circulation": "book-circulation",
    }[data.reportType];

    generateReport.mutate({
      type: reportType,
      data: {
        startDate: data.startDate,
        endDate: data.endDate,
      },
    });
  };

  if (isLoading) return <div>Loading...</div>;

  return (
    <>
      <Button onClick={() => setOpen(true)}>Generate Report</Button>
      <Table>
        <TableHead>
          <TableRow>
            <TableCell>Type</TableCell>
            <TableCell>Generated By</TableCell>
            <TableCell>Date</TableCell>
            <TableCell>Actions</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {reports?.map((report) => (
            <TableRow key={report.ReportID}>
              <TableCell>{report.ReportType}</TableCell>
              <TableCell>{report.AdminName}</TableCell>
              <TableCell>
                {new Date(report.GeneratedDate).toLocaleDateString()}
              </TableCell>
              <TableCell>
                <Button
                  color="error"
                  onClick={() => deleteReport.mutate(report.ReportID)}
                >
                  Delete
                </Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>

      <Dialog open={open} onClose={() => setOpen(false)}>
        <DialogTitle>Generate Report</DialogTitle>
        <DialogContent>
          <Box
            component="form"
            onSubmit={handleSubmit(onSubmit)}
            sx={{ mt: 1 }}
          >
            <TextField
              margin="normal"
              fullWidth
              select
              label="Report Type"
              {...register("reportType", { required: true })}
            >
              <MenuItem value="Book Inventory">Book Inventory</MenuItem>
              <MenuItem value="User Activity">User Activity</MenuItem>
              <MenuItem value="Fine Collection">Fine Collection</MenuItem>
              <MenuItem value="Book Circulation">Book Circulation</MenuItem>
            </TextField>
            <TextField
              margin="normal"
              fullWidth
              type="date"
              label="Start Date"
              {...register("startDate")}
            />
            <TextField
              margin="normal"
              fullWidth
              type="date"
              label="End Date"
              {...register("endDate")}
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpen(false)}>Cancel</Button>
          <Button type="submit" onClick={handleSubmit(onSubmit)}>
            Generate
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
}

export default ReportManagement;
