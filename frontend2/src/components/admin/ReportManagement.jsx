import { useQuery, useMutation, useQueryClient } from "react-query";
import axios from "axios";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  Button,
  Box,
  Dialog,
  DialogTitle,
  MenuItem,
  DialogContent,
  DialogActions,
  TextField,
  IconButton,
} from "@mui/material";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "react-toastify";
import DeleteIcon from "@mui/icons-material/Delete";

function ReportManagement() {
  const queryClient = useQueryClient();
  const { register, handleSubmit, reset } = useForm();
  const [open, setOpen] = useState(false);
  const [viewReportOpen, setViewReportOpen] = useState(false);
  const [currentReport, setCurrentReport] = useState(null);

  const { data: reports, isLoading } = useQuery("reports", async () => {
    const response = await axios.get("/api/reports", {
      headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
    });
    return response.data.reports;
  });

  const generateReport = useMutation(
    ({ type, data }) =>
      axios.post(`/api/reports/${type}`, data, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
      }),
    {
      onSuccess: () => {
        queryClient.invalidateQueries("reports");
        toast.success("Report generated successfully");
        setOpen(false);
        reset();
      },
      onError: () => toast.error("Failed to generate report"),
    }
  );

  const deleteReport = useMutation(
    (reportId) =>
      axios.delete(`/api/reports/${reportId}`, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
      }),
    {
      onSuccess: () => {
        queryClient.invalidateQueries("reports");
        toast.success("Report deleted successfully");
      },
      onError: () => toast.error("Failed to delete report"),
    }
  );

  const handleDeleteReport = (reportId) => {
    if (window.confirm("Are you sure you want to delete this report?")) {
      deleteReport.mutate(reportId);
    }
  };

  const handleViewReport = (report) => {
    setCurrentReport(report);
    setViewReportOpen(true);
  };

  const onSubmit = (data) => {
    const reportType = {
      "Book Inventory": "book-inventory",
      "User Activity": "user-activity",
      "Fine Collection": "fine-collection",
      "Book Circulation": "book-circulation",
    }[data.reportType];

    generateReport.mutate({
      type: reportType,
      data: {
        startDate: data.startDate,
        endDate: data.endDate,
      },
    });
  };

  if (isLoading) return <div>Loading...</div>;

  return (
    <>
      <Button onClick={() => setOpen(true)}>Generate Report</Button>
      <Table>
        <TableHead>
          <TableRow>
            <TableCell>ID</TableCell>
            <TableCell>Type</TableCell>
            <TableCell>Generated By</TableCell>
            <TableCell>Date</TableCell>
            <TableCell>Actions</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {reports?.map((report) => (
            <TableRow key={report.ReportID}>
              <TableCell>{report.ReportID}</TableCell>
              <TableCell>{report.ReportType}</TableCell>
              <TableCell>{report.AdminName}</TableCell>
              <TableCell>
                {new Date(report.GeneratedDate).toLocaleDateString()}
              </TableCell>
              <TableCell>
                <Button onClick={() => handleViewReport(report)}>
                  View Report
                </Button>
                <IconButton
                  color="error"
                  onClick={() => handleDeleteReport(report.ReportID)}
                >
                  <DeleteIcon />
                </IconButton>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>

      <Dialog open={open} onClose={() => setOpen(false)}>
        <DialogTitle>Generate Report</DialogTitle>
        <DialogContent>
          <Box
            component="form"
            onSubmit={handleSubmit(onSubmit)}
            sx={{ mt: 1 }}
          >
            <TextField
              margin="normal"
              fullWidth
              select
              label="Report Type"
              {...register("reportType", { required: true })}
            >
              <MenuItem value="Book Inventory">Book Inventory</MenuItem>
              <MenuItem value="User Activity">User Activity</MenuItem>
              <MenuItem value="Fine Collection">Fine Collection</MenuItem>
              <MenuItem value="Book Circulation">Book Circulation</MenuItem>
            </TextField>
            <TextField
              margin="normal"
              fullWidth
              type="date"
              label="Start Date"
              InputLabelProps={{ shrink: true }}
              {...register("startDate")}
            />
            <TextField
              margin="normal"
              fullWidth
              type="date"
              label="End Date"
              InputLabelProps={{ shrink: true }}
              {...register("endDate")}
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpen(false)}>Cancel</Button>
          <Button type="submit" onClick={handleSubmit(onSubmit)}>
            Generate
          </Button>
        </DialogActions>
      </Dialog>

      {/* View Report Dialog */}
      <Dialog
        open={viewReportOpen}
        onClose={() => setViewReportOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>{currentReport?.ReportType} Report</DialogTitle>
        <DialogContent>
          {currentReport && (
            <Box sx={{ mt: 2 }}>
              <p>
                <strong>Generated by:</strong> {currentReport.AdminName}
              </p>
              <p>
                <strong>Date:</strong>{" "}
                {new Date(currentReport.GeneratedDate).toLocaleDateString()}
              </p>
              <hr />
              <h4>Report Data:</h4>
              <pre
                style={{
                  whiteSpace: "pre-wrap",
                  overflowX: "auto",
                  backgroundColor: "#f5f5f5",
                  padding: "15px",
                  borderRadius: "4px",
                }}
              >
                {JSON.stringify(currentReport.reportData, null, 2)}
              </pre>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setViewReportOpen(false)}>Close</Button>
          <Button
            onClick={() => {
              // Download functionality
              const dataStr = JSON.stringify(currentReport.reportData);
              const dataUri =
                "data:application/json;charset=utf-8," +
                encodeURIComponent(dataStr);
              const downloadAnchorNode = document.createElement("a");
              downloadAnchorNode.setAttribute("href", dataUri);
              downloadAnchorNode.setAttribute(
                "download",
                `${currentReport.ReportType.replace(/\s+/g, "-")}-${
                  new Date().toISOString().split("T")[0]
                }.json`
              );
              document.body.appendChild(downloadAnchorNode);
              downloadAnchorNode.click();
              downloadAnchorNode.remove();
            }}
          >
            Download
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
}

export default ReportManagement;
